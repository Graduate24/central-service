"""
Django settings for sacentral project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import json
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import mongoengine
import pika

from initwork.initwork import Rule, init

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'l_a80^@6b8n$-hnsdlc54)1%_)l+@sa+a-qk&6=p3^yi*08xu3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'authentication',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'authentication.middleware.CookieRotateMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'authentication.middleware.LoginRequiredMiddleware',
    'authentication.middleware.JsonLoaderMiddleware',
]

ROOT_URLCONF = 'sacentral.urls'

WSGI_APPLICATION = 'sacentral.wsgi.application'
ASGI_APPLICATION = "sacentral.routing.application"
# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

MONGODB_DATABASES = {
    'default': {
        'USER': 'mongouser',
        'PASSWD': None,
        'HOST': None,
        'NAME': None,
    }
}

AUTH_USER_MODEL = 'authentication.User'

LOGIN_PATH = '/api/auth/login'

LOGIN_EXEMPT_URLS = [
    '/api/auth/signup',
    LOGIN_PATH,
]

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/
LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True
USE_TZ = False
USE_L10N = True
DATETIME_FORMAT = 'yyyy-MM-dd HH:mm:ss'

# Static Files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
# codedb
CODE_ROOT = os.path.join(BASE_DIR, 'static', 'codedb')

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, "docs", "static"),
    CODE_ROOT
]

APIDOC_ROOT = os.path.join(BASE_DIR, "docs", "static")

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Session and CSRF
SESSION_COOKIE_HTTPONLY = False

FILE_SERVER_SECRET = 'ggsuI91fas134sfwkxhmsL'

FILE_SERVER = ['http://127.0.0.1:8001/']

FILE_DEFAULT_FOLDER = 'watch'

FILE_PUT_SIZE = 5 * 1024 * 1024
FILE_PART_SIZE = 5 * 1024 * 1024

DEFAULT_LOGS = 'test.log'
maxBytes = 1024 * 1024 * 50
backupCount = 5

STRING_ID = False

USE_REDIS_LAYER = False

DEFAULT_LAYERS_BACKEND = {
    "BACKEND": "channels.layers.InMemoryChannelLayer"
}

REDIS_SERVER = "127.0.0.1"
REDIS_PORT = 6379
REDIS_SECRET = "feasf32axt"
# Load settings from file

PERMISSIONS_CHECK = False
LOGIN_EXEMPT = False

# default permissions
DEFAULT_PERMISSIONS = LOGIN_EXEMPT_URLS + [
    '/api/auth/logout',  # 退出登录
    ('get', '/api/auth/logout/resources'),  # 资源列表
    ('get', '/api/auth/resources/tree'),  # 资源树
    ('get', '/api/auth/menu/tree'),  # 资源树
    ('get', '/api/auth/user/menu/tree'),  # 用户菜单树
]

RABBIT_CONFIG = {
    "RABBITMQ_HOSTS": "localhost",
    "RABBITMQ_PORT": 5672,
    "RABBITMQ_VHOST": "/",
    "RABBITMQ_USER": "codeanalysis",
    "RABBITMQ_PWD": "codeanalysis2021"
}

SYSLOG = {
    "HOST": "127.0.0.1",
    "PORT": 514
}

try:
    settings_file_path = os.path.join(BASE_DIR, 'settings.json')
    with open(settings_file_path) as settings_file:
        settings = json.load(settings_file)
    for key in settings:
        locals()[key] = settings.get(key, '')
except OSError:
    print('Settings file not found, fallback to defaults')
except json.JSONDecodeError:
    print('Settings json decode error, fallback to defaults')

REDIS_LAYERS_BACKEND = {
    "BACKEND": "channels_redis.core.RedisChannelLayer",
    "CONFIG": {
        "hosts": [("redis://:{}@{}:{}/2".format(REDIS_SECRET, REDIS_SERVER, REDIS_PORT))],
    },
}
CHANNEL_LAYERS = {
    "default": REDIS_LAYERS_BACKEND if USE_REDIS_LAYER else DEFAULT_LAYERS_BACKEND
}
# Connect to MongoDB Server

mongoengine.connect(MONGODB_DATABASES['default']['NAME'], alias='default',
                    host=MONGODB_DATABASES['default']['HOST'],
                    username=MONGODB_DATABASES['default']['USER'],
                    password=MONGODB_DATABASES['default']['PASSWD'])

MONGODB_BROKER_URL = 'mongodb://{username}:{password}@{host}/{database}'.format(
    username=MONGODB_DATABASES['default']['USER'],
    password=MONGODB_DATABASES['default']['PASSWD'],
    host=MONGODB_DATABASES['default']['HOST'],
    database=MONGODB_DATABASES['default']['NAME']).replace('None:None@', '')

BROKER_URL = 'amqp://%s:%s@%s:%d/%s' % (
    RABBIT_CONFIG['RABBITMQ_USER'], RABBIT_CONFIG['RABBITMQ_PWD'], RABBIT_CONFIG['RABBITMQ_HOSTS'],
    RABBIT_CONFIG['RABBITMQ_PORT'], RABBIT_CONFIG['RABBITMQ_VHOST'])

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host=RABBIT_CONFIG['RABBITMQ_HOSTS'], port=RABBIT_CONFIG['RABBITMQ_PORT'],
                              virtual_host=RABBIT_CONFIG['RABBITMQ_VHOST'],
                              credentials=pika.PlainCredentials(username=RABBIT_CONFIG['RABBITMQ_USER'],
                                                                password=RABBIT_CONFIG['RABBITMQ_PWD'])))
channel = connection.channel()
channel.queue_declare(queue='ml_engine', durable=True)
channel.queue_declare(queue='ml_engine_complete', durable=True)
channel.queue_declare(queue='sa_compile', durable=True)
channel.queue_declare(queue='sa_compile_complete', durable=True)
channel.queue_declare(queue='sa_engine', durable=True)
channel.queue_declare(queue='sa_engine_complete', durable=True)
channel.queue_declare(queue='sa_compile_log', durable=True)

init()

standard_format = '[%(asctime)s][%(threadName)s:%(thread)d]' + \
                  '[task_id:%(name)s][%(filename)s:%(lineno)d] ' + \
                  '[%(levelname)s]- %(message)s'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': standard_format
        }
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': DEFAULT_LOGS,
            'maxBytes': maxBytes,  # 5 MB
            'backupCount': backupCount,
            'formatter': 'standard',
            'delay': True,
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'default': {
            'handlers': ['default'],
            'level': 'INFO',
        },
        'django': {
            'handlers': ['console', 'default'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
